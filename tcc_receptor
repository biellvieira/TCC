#include <esp_now.h>
#include <WiFi.h>
#include <Servo.h>

// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
 float inclinacaoX;
 float inclinacaoY;
 float velocidade;
 int anguloServo;
} struct_message;

// Definindo as portas do Arduino conectadas ao módulo ponte H L293D
int enablePin = 15;
int in1Pin = 18;
int in2Pin = 19;

// Definindo as portas do Arduino conectadas ao servo motor
int servoPin = 23;

// Criando um objeto Servo
Servo servo;

// Create a struct_message called myData
struct_message myData;

// callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&myData, incomingData, sizeof(myData));
}

void setup() {
  // Configurando as portas como saídas
  pinMode(enablePin, OUTPUT);
  pinMode(in1Pin, OUTPUT);
  pinMode(in2Pin, OUTPUT);
  
  // Configurando o servo motor
  servo.attach(servoPin);
  servo.write(90);
  
  // Desligando o motor inicialmente
  digitalWrite(enablePin, LOW);

  // Initialize Serial Monitor
  Serial.begin(115200);
  
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_register_recv_cb(OnDataRecv);
}  

void loop() {
  
  // Movimentando o motor de acordo com a inclinação no eixo X
  if(myData.inclinacaoX < -5) {
    digitalWrite(in1Pin, HIGH);
    digitalWrite(in2Pin, LOW);
    analogWrite(enablePin, abs(myData.velocidade));
  } else if(myData.inclinacaoX > 5) {
    digitalWrite(in1Pin, LOW);
    digitalWrite(in2Pin, HIGH);
    analogWrite(enablePin, abs(myData.velocidade));
  } else {
    digitalWrite(enablePin, LOW);
  }
  
  // Movimentando o servo motor de acordo com a inclinação no eixo Y
  int anguloServo = map(myData.inclinacaoY, -90, 90, 0, 180);
  servo.write(anguloServo);
  
  delay(50);
}
